import{_ as d}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,a as t,d as i,e,b as n,w as l,r,o as p}from"./app-C8JBMu7V.js";const k={},o={class:"hint-container tip"},c={class:"hint-container tip"},g={class:"hint-container tip"};function y(u,s){const a=r("RouteLink");return p(),h("div",null,[s[11]||(s[11]=t('<h1 id="请求消息映射" tabindex="-1"><a class="header-anchor" href="#请求消息映射"><span>请求消息映射</span></a></h1><h2 id="jt808requesthandler" tabindex="-1"><a class="header-anchor" href="#jt808requesthandler"><span>@Jt808RequestHandler</span></a></h2><h3 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h3><div class="hint-container tip"><p class="hint-container-title">提示</p><p>被该注解标记的类应该是被 <strong>Spring</strong> 管理的类。一般来说应该和 <strong>Spring</strong> 的 <code>@Component</code> 等注解同时出现。</p></div><p><code>@Jt808RequestHandler</code> 注解的作用类似于 <strong>WebFlux/WebMvc</strong> 中的 <code>@Controller</code>。</p><p>就是标记一下被该注解修饰的类中存在若干个能处理请求的处理器方法。</p><h3 id="属性介绍" tabindex="-1"><a class="header-anchor" href="#属性介绍"><span>属性介绍</span></a></h3><table><thead><tr><th>属性</th><th>类型</th><th>作用</th><th>取值示例</th></tr></thead><tbody><tr><td><code>nonBlockingScheduler</code></td><td><code>String</code></td><td>当前类中 <strong>非阻塞类型</strong> 处理器方法的默认调度器</td><td><code>my-custom-scheudler</code></td></tr><tr><td><code>blockingScheduler</code></td><td><code>String</code></td><td>当前类中 <strong>阻塞类型</strong> 处理器方法的默认调度器</td><td><code>my-custom-scheudler</code></td></tr></tbody></table>',8)),i("div",o,[s[2]||(s[2]=i("p",{class:"hint-container-title"},"提示",-1)),i("p",null,[s[1]||(s[1]=e("调度器详情可参考：")),n(a,{to:"/guide/server/core-component/scheduler-registry.html"},{default:l(()=>s[0]||(s[0]=[e("XtreamSchedulerRegistry")])),_:1,__:[0]})])]),s[12]||(s[12]=t('<h2 id="jt808requesthandlermapping" tabindex="-1"><a class="header-anchor" href="#jt808requesthandlermapping"><span>@Jt808RequestHandlerMapping</span></a></h2><h3 id="作用-1" tabindex="-1"><a class="header-anchor" href="#作用-1"><span>作用</span></a></h3><p>该注解和 <strong>WebFlux/WebMvc</strong> 中 <code>@RequestMapping</code> 、<code>@GetMapping</code> 等注解功能类似。</p><p>表明被该注解修饰的方法具有处理请求的能力。</p><h3 id="属性介绍-1" tabindex="-1"><a class="header-anchor" href="#属性介绍-1"><span>属性介绍</span></a></h3><table><thead><tr><th>属性</th><th>类型</th><th>作用</th><th>取值示例</th></tr></thead><tbody><tr><td><code>scheduler</code></td><td><code>String</code></td><td>处理器方法在哪个线程池上运行</td><td><code>my-scheudler-1</code></td></tr><tr><td><code>messageIds</code></td><td><code>int[]</code></td><td>处理器方法支持的消息ID</td><td><code>0x0200</code></td></tr><tr><td><code>versions</code></td><td><code>Jt808ProtocolVersion[]</code></td><td>处理器方法支持的消息版本</td><td><code>VERSION_2019</code></td></tr><tr><td><code>desc</code></td><td><code>String</code></td><td>描述信息</td><td><code>some desc...</code></td></tr></tbody></table>',6)),i("div",c,[s[5]||(s[5]=i("p",{class:"hint-container-title"},"提示",-1)),i("p",null,[s[4]||(s[4]=e("调度器详情可参考：")),n(a,{to:"/guide/server/core-component/scheduler-registry.html"},{default:l(()=>s[3]||(s[3]=[e("XtreamSchedulerRegistry")])),_:1,__:[3]})])]),s[13]||(s[13]=t('<h2 id="jt808requestbody" tabindex="-1"><a class="header-anchor" href="#jt808requestbody"><span>@Jt808RequestBody</span></a></h2><h3 id="作用-2" tabindex="-1"><a class="header-anchor" href="#作用-2"><span>作用</span></a></h3><p>该注解和 <strong>WebFlux/WebMvc</strong> 中 <code>@RequestBody</code> 注解功能类似。 可以将 <strong>请求体</strong> 映射到被该注解修饰的实体类(<code>DTO</code>)。</p><h3 id="属性介绍-2" tabindex="-1"><a class="header-anchor" href="#属性介绍-2"><span>属性介绍</span></a></h3><p>目前就一个属性，即 <code>boolean bufferAsSlice() default true;</code>。</p><ul><li><code>bufferAsSlice = true</code><ul><li>使用 <code>Jt808Request.body().slice()</code>进行消息映射，而不是直接读取 <code>ByteBuf</code>。</li><li><code>readerIndex</code> 的改变不会影响 <code>Jt808Request.body()</code></li></ul></li><li><code>bufferAsSlice = false</code><ul><li>直接读取 <code>ByteBuf</code></li><li><code>readerIndex</code> 会直接影响 <code>Jt808Request.body()</code></li></ul></li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3>',7)),i("div",g,[s[8]||(s[8]=i("p",{class:"hint-container-title"},"提示",-1)),i("p",null,[s[7]||(s[7]=e("实体类中的注解详情可参考：")),n(a,{to:"/guide/core/annotation-driven/xtream-field-annotation.html"},{default:l(()=>s[6]||(s[6]=[e("@XtreamField")])),_:1,__:[6]})])]),s[14]||(s[14]=t(`<p>定义一个接收请求的实体类：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BuiltinMessage0100V2019</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 1. [0-2) WORD 省域ID</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Preset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">JtStyle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Word</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> provinceId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 2. [2-4) WORD 省域ID</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Preset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">JtStyle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Word</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cityId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 省略其他属性</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将 <strong>请求体</strong> 映射到该实体类：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Jt808RequestHandlerMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">messageIds</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x0100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> versions</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Jt808ProtocolVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">VERSION_2019</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Jt808ResponseBody</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">messageId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x8100</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Mono</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">BuiltinMessage8100</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> processMessage0x0100V2019</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 将请求体映射到实体类</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Jt808RequestBody</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BuiltinMessage0100V2019</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> requestBody</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参数解析器" tabindex="-1"><a class="header-anchor" href="#参数解析器"><span>参数解析器</span></a></h2><p>被 <code>@Jt808RequestHandlerMapping</code> 修饰的处理器方法，一般来说都要有方法参数。比如下面代码中的方法参数: <code>session</code>、<code>request</code> 和 <code>body</code>。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Jt808RequestHandlerMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">messageIds</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x0200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> versions</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Jt808ProtocolVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">VERSION_2019</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Jt808ResponseBody</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">messageId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x8001</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Mono</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">ServerCommonReplyMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> processMessage0200V2019</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Jt808Session</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> session</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Jt808Request</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Jt808RequestBody</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BuiltinMessage0200</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> body) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ...;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里说的 <strong>参数解析器</strong> 就是用来给处理器方法提供参数解析逻辑的。</p>`,8)),i("p",null,[s[10]||(s[10]=e("有哪些内置的参数解析器？参考 ")),n(a,{to:"/ext/jt/jt808/annotation-driven/argument-resolver.html"},{default:l(()=>s[9]||(s[9]=[e("参数解析器")])),_:1,__:[9]})])])}const m=d(k,[["render",y]]),v=JSON.parse('{"path":"/ext/jt/jt808/annotation-driven/request-message-mapping.html","title":"请求消息映射","lang":"zh-CN","frontmatter":{"icon":"at","article":false,"description":"请求消息映射 @Jt808RequestHandler 作用 提示 被该注解标记的类应该是被 Spring 管理的类。一般来说应该和 Spring 的 @Component 等注解同时出现。 @Jt808RequestHandler 注解的作用类似于 WebFlux/WebMvc 中的 @Controller。 就是标记一下被该注解修饰的类中存在若干个...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"请求消息映射\\",\\"description\\":\\"请求消息映射 @Jt808RequestHandler 作用 提示 被该注解标记的类应该是被 Spring 管理的类。一般来说应该和 Spring 的 @Component 等注解同时出现。 @Jt808RequestHandler 注解的作用类似于 WebFlux/WebMvc 中的 @Controller。 就是标记一下被该注解修饰的类中存在若干个...\\"}"],["meta",{"property":"og:url","content":"https://hylexus.github.io/xtream-codec/ext/jt/jt808/annotation-driven/request-message-mapping.html"}],["meta",{"property":"og:site_name","content":"xtream-codec"}],["meta",{"property":"og:title","content":"请求消息映射"}],["meta",{"property":"og:description","content":"请求消息映射 @Jt808RequestHandler 作用 提示 被该注解标记的类应该是被 Spring 管理的类。一般来说应该和 Spring 的 @Component 等注解同时出现。 @Jt808RequestHandler 注解的作用类似于 WebFlux/WebMvc 中的 @Controller。 就是标记一下被该注解修饰的类中存在若干个..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-17T15:13:15.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-17T15:13:15.000Z"}]]},"git":{"createdTime":1734436871000,"updatedTime":1734448395000,"contributors":[{"name":"hylexus","username":"","email":"hylexus@163.com","commits":2}]},"readingTime":{"minutes":2.02,"words":607},"filePathRelative":"ext/jt/jt808/annotation-driven/request-message-mapping.md","excerpt":"\\n<h2>@Jt808RequestHandler</h2>\\n<h3>作用</h3>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<p>被该注解标记的类应该是被 <strong>Spring</strong> 管理的类。一般来说应该和 <strong>Spring</strong> 的 <code>@Component</code> 等注解同时出现。</p>\\n</div>\\n<p><code>@Jt808RequestHandler</code> 注解的作用类似于 <strong>WebFlux/WebMvc</strong> 中的 <code>@Controller</code>。</p>","autoDesc":true}');export{m as comp,v as data};

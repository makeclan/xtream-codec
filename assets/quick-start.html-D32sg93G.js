import{_ as k}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,a as l,b as p,w as n,r as d,o as g,d as i,e as a}from"./app-C8JBMu7V.js";const c="/xtream-codec/img/ext/jt/jt808/quick-start/quick-start-app-startup.png",o="/xtream-codec/img/ext/jt/jt808/quick-start/quick-start-app-network-cat-0200.png",A="/xtream-codec/img/ext/jt/jt808/quick-start/quick-start-app-0200-log.png",y={};function B(v,s){const h=d("Tabs");return g(),r("div",null,[s[4]||(s[4]=l('<h1 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始"><span>快速开始</span></a></h1><p>此处将展示一个 最少配置 的 <strong>808协议</strong> 消息处理服务的搭建。</p><h2 id="创建工程" tabindex="-1"><a class="header-anchor" href="#创建工程"><span>创建工程</span></a></h2><p>创建一个空的 <strong>spring-boot</strong> 工程。</p><div class="hint-container tip"><p class="hint-container-title">传送门</p><p>可以使用 <a href="https://start.spring.io" target="_blank" rel="noopener noreferrer">Spring Initializer</a> 快速初始化一个 Spring Boot 工程。</p></div><h2 id="添加依赖" tabindex="-1"><a class="header-anchor" href="#添加依赖"><span>添加依赖</span></a></h2><p>引入为 <strong>808协议</strong> 提供的 <code>jt-808-server-spring-boot-starter-reactive</code>。</p><p>最新版本请点击 <a href="https://search.maven.org/search?q=g:%22io.github.hylexus.xtream%22%20AND%20a:%22jt-808-server-spring-boot-starter-reactive%22" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/maven-central/v/io.github.hylexus.xtream/jt-808-server-spring-boot-starter-reactive.svg?label=Maven Central" alt="Maven Central" loading="lazy"></a> 查看。</p>',8)),p(h,{data:[{id:"Maven"},{id:"Gradle"}],"tab-id":"starter"},{title0:n(({value:t,isActive:e})=>s[0]||(s[0]=[a("Maven")])),title1:n(({value:t,isActive:e})=>s[1]||(s[1]=[a("Gradle")])),tab0:n(({value:t,isActive:e})=>s[2]||(s[2]=[i("div",{class:"language-xml line-numbers-mode","data-highlighter":"shiki","data-ext":"xml",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",{class:"language-xml"},[i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"<"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"dependency"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},">")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    <"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"groupId"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},">io.github.hylexus.xtream</"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"groupId"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},">")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    <"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"artifactId"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},">jt-808-server-spring-boot-starter-reactive</"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"artifactId"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},">")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"    <"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"version"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},">0.0.1-rc.6</"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"version"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},">")]),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"</"),i("span",{style:{"--shiki-light":"#E45649","--shiki-dark":"#E06C75"}},"dependency"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},">")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),tab1:n(({value:t,isActive:e})=>s[3]||(s[3]=[i("div",{class:"language-groovy line-numbers-mode","data-highlighter":"shiki","data-ext":"groovy",style:{"--shiki-light":"#383A42","--shiki-dark":"#abb2bf","--shiki-light-bg":"#FAFAFA","--shiki-dark-bg":"#282c34"}},[i("pre",{class:"shiki shiki-themes one-light one-dark-pro vp-code"},[i("code",{class:"language-groovy"},[i("span",{class:"line"}),a(`
`),i("span",{class:"line"},[i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#61AFEF"}},"api"),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},"("),i("span",{style:{"--shiki-light":"#50A14F","--shiki-dark":"#98C379"}},'"io.github.hylexus.xtream:jt-808-server-spring-boot-starter-reactive:0.0.1-rc.6"'),i("span",{style:{"--shiki-light":"#383A42","--shiki-dark":"#ABB2BF"}},")")])])]),i("div",{class:"line-numbers","aria-hidden":"true",style:{"counter-reset":"line-number 0"}},[i("div",{class:"line-number"}),i("div",{class:"line-number"})])],-1)])),_:1}),s[5]||(s[5]=l(`<h2 id="配置" tabindex="-1"><a class="header-anchor" href="#配置"><span>配置</span></a></h2><p>该示例中，你可以不用做任何额外配置。</p><p>下面是几个关键配置的默认值(<code>application.yaml</code>)：</p><div class="language-yaml line-numbers-mode" data-highlighter="shiki" data-ext="yaml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-yaml"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">jt808-server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  ## 指令服务器</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  instruction-server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## 指令服务器-TCP</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    tcp-server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 绑定所有网卡(不只是127.0.0.1)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.0.0.0</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3927</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## 指令服务器-UDP</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    udp-server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 绑定所有网卡(不只是127.0.0.1)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.0.0.0</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3721</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  ## 附件服务器(苏标扩展)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  attachment-server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## 附件服务器-TCP</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    tcp-server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 绑定所有网卡(不只是127.0.0.1)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.0.0.0</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3824</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    ## 附件服务器-UDP</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    udp-server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">      # 绑定所有网卡(不只是127.0.0.1)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      host</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.0.0.0</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">      port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3618</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编写消息处理器" tabindex="-1"><a class="header-anchor" href="#编写消息处理器"><span>编写消息处理器</span></a></h2><p>在 <strong>spring-boot</strong> 能扫描到的包中，随便新建一个 <strong>java类</strong></p><p>本示例中命名为 <code>Jt808QuickStartRequestHandler.java</code>。内容如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Component</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // spring 环境下自动为该类创建单实例</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Jt808RequestHandler</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 被该注解标记的类才会被扫描；类似于 spring 的 @Controller</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Jt808QuickStartRequestHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * 位置上报(V2019)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 类似于 spring 的 @RequestMapping；这里表示该方法支持处理 0x0200 指令，并且是 V2019 版本的指令</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Jt808RequestHandlerMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">messageIds</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x0200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> versions</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Jt808ProtocolVersion</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">VERSION_2019</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 类似于 spring 的 @ResponseBody；这里表示该方法返回的数据将被封装成 0x8001 指令返回给客户端</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Jt808ResponseBody</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">messageId</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0x8001</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Mono</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ServerCommonReplyMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> processMessage0200V2019</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            Jt808Session</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> session</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            Jt808Request</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Jt808RequestBody</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BuiltinMessage0200</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">info</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;v2019-0x0200: {}&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, body);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">processLocationMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(session, body).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(result </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">-&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ServerCommonReplyMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">of</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request, result);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * 0:成功/确认; 1:失败; 2:消息有误; 3:不支持; 4:报警处理确认</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Mono</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> processLocationMessage</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Jt808Session</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> session</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BuiltinMessage0200</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 业务逻辑...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Mono</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">just</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="测试" tabindex="-1"><a class="header-anchor" href="#测试"><span>测试</span></a></h2><h3 id="启动项目" tabindex="-1"><a class="header-anchor" href="#启动项目"><span>启动项目</span></a></h3><p>至此，对 <strong>808消息</strong> 的处理服务已经搭建完毕。启动你新建的 <strong>spring-boot</strong> 项目开始测试，下图是启动项目后的效果：</p><figure><img src="`+c+'" alt="quick-start-app-startup" tabindex="0" loading="lazy"><figcaption>quick-start-app-startup</figcaption></figure><h3 id="发报文" tabindex="-1"><a class="header-anchor" href="#发报文"><span>发报文</span></a></h3><div class="hint-container caution"><p class="hint-container-title">警告</p><p>不管你使用的是什么发包工具，都请确保你的报文是以 <span style="color:red;">十六进制</span> 格式发送的。</p></div><p>发送这条测试报文：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>7e02004086010000000001893094655200E4000000000000000101D907F2073D336C000000000000211124114808010400000026030200003001153101002504000000001404000000011504000000FA160400000000170200001803000000EA10FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF02020000EF0400000000F31B017118000000000000000000000000000000000000000000000000567e</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>下图是 Mac 环境下使用 <a href="https://apps.apple.com/cn/app/networkcat/id6503148471?mt=12" target="_blank" rel="noopener noreferrer">NetworkCat</a> 发送的 <strong>808协议</strong> 位置上报报文截图。</p><figure><img src="'+o+'" alt="quick-start-app-startup" tabindex="0" loading="lazy"><figcaption>quick-start-app-startup</figcaption></figure><h3 id="服务端日志" tabindex="-1"><a class="header-anchor" href="#服务端日志"><span>服务端日志</span></a></h3><p>发送报文之后，你应该会看到类似下图的日志：</p><figure><img src="'+A+'" alt="quick-start-app-startup" tabindex="0" loading="lazy"><figcaption>quick-start-app-startup</figcaption></figure>',21))])}const F=k(y,[["render",B]]),b=JSON.parse('{"path":"/ext/jt/jt808/quick-start/quick-start.html","title":"快速开始","lang":"zh-CN","frontmatter":{"article":false,"icon":"rocket","tag":["JT/T 808"],"description":"快速开始 此处将展示一个 最少配置 的 808协议 消息处理服务的搭建。 创建工程 创建一个空的 spring-boot 工程。 传送门 可以使用 Spring Initializer 快速初始化一个 Spring Boot 工程。 添加依赖 引入为 808协议 提供的 jt-808-server-spring-boot-starter-reactiv...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"快速开始\\",\\"description\\":\\"快速开始 此处将展示一个 最少配置 的 808协议 消息处理服务的搭建。 创建工程 创建一个空的 spring-boot 工程。 传送门 可以使用 Spring Initializer 快速初始化一个 Spring Boot 工程。 添加依赖 引入为 808协议 提供的 jt-808-server-spring-boot-starter-reactiv...\\"}"],["meta",{"property":"og:url","content":"https://hylexus.github.io/xtream-codec/ext/jt/jt808/quick-start/quick-start.html"}],["meta",{"property":"og:site_name","content":"xtream-codec"}],["meta",{"property":"og:title","content":"快速开始"}],["meta",{"property":"og:description","content":"快速开始 此处将展示一个 最少配置 的 808协议 消息处理服务的搭建。 创建工程 创建一个空的 spring-boot 工程。 传送门 可以使用 Spring Initializer 快速初始化一个 Spring Boot 工程。 添加依赖 引入为 808协议 提供的 jt-808-server-spring-boot-starter-reactiv..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://img.shields.io/maven-central/v/io.github.hylexus.xtream/jt-808-server-spring-boot-starter-reactive.svg?label=Maven%20Central"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-29T07:31:14.000Z"}],["meta",{"property":"article:tag","content":"JT/T 808"}],["meta",{"property":"article:modified_time","content":"2025-06-29T07:31:14.000Z"}]]},"git":{"createdTime":1734100399000,"updatedTime":1751182274000,"contributors":[{"name":"hylexus","username":"","email":"hylexus@163.com","commits":15}]},"readingTime":{"minutes":2.39,"words":717},"filePathRelative":"ext/jt/jt808/quick-start/quick-start.md","excerpt":"\\n<p>此处将展示一个 最少配置 的 <strong>808协议</strong> 消息处理服务的搭建。</p>\\n<h2>创建工程</h2>\\n<p>创建一个空的 <strong>spring-boot</strong> 工程。</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">传送门</p>\\n<p>可以使用 <a href=\\"https://start.spring.io\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Spring Initializer</a> 快速初始化一个 Spring Boot 工程。</p>\\n</div>","autoDesc":true}');export{F as comp,b as data};

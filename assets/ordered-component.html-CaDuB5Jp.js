import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as e,o as a}from"./app-C8JBMu7V.js";const t="/xtream-codec/img/server/core-component/ordered-components.png",r={};function l(p,i){return a(),n("div",null,i[0]||(i[0]=[e(`<h1 id="orderedcomponent" tabindex="-1"><a class="header-anchor" href="#orderedcomponent"><span>OrderedComponent</span></a></h1><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用"><span>作用</span></a></h2><p>有些组件需要多个实例。比如 <code>XtreamFilter</code>，一个系统中出现 N 个过滤器是很正常的。但是这些过滤器的执行顺序怎么保证？</p><p><strong>Xtream</strong> 中简单粗暴的方案是：让这些组件实现 <code>OrderedComponent</code> 接口，然后用户自己通过 <code>order()</code> 方法返回一个优先级，按照优先级排序(升序)。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><ul><li>类似于 <strong>spring</strong> 的 <code>@org.springframework.core.Ordered</code></li><li>数字越小，优先级越高</li></ul></div><p>接口定义如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OrderedComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> BUILTIN_COMPONENT_PRECEDENCE </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> DEFAULT_PRECEDENCE </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> HIGHEST_PRECEDENCE </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MIN_VALUE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> LOWEST_PRECEDENCE </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MAX_VALUE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    default</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> order</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> DEFAULT_PRECEDENCE;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> &lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> OrderedComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">T</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">components</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> components</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stream</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sorted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Comparator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">comparingInt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(OrderedComponent</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">::</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">order))</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="支持的组件" tabindex="-1"><a class="header-anchor" href="#支持的组件"><span>支持的组件</span></a></h2><figure><img src="`+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',9)]))}const k=s(r,[["render",l]]),o=JSON.parse('{"path":"/guide/server/core-component/ordered-component.html","title":"OrderedComponent","lang":"zh-CN","frontmatter":{"icon":"arrow-down-1-9","article":false,"description":"OrderedComponent 作用 有些组件需要多个实例。比如 XtreamFilter，一个系统中出现 N 个过滤器是很正常的。但是这些过滤器的执行顺序怎么保证？ Xtream 中简单粗暴的方案是：让这些组件实现 OrderedComponent 接口，然后用户自己通过 order() 方法返回一个优先级，按照优先级排序(升序)。 提示 类似于 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"OrderedComponent\\",\\"description\\":\\"OrderedComponent 作用 有些组件需要多个实例。比如 XtreamFilter，一个系统中出现 N 个过滤器是很正常的。但是这些过滤器的执行顺序怎么保证？ Xtream 中简单粗暴的方案是：让这些组件实现 OrderedComponent 接口，然后用户自己通过 order() 方法返回一个优先级，按照优先级排序(升序)。 提示 类似于 ...\\"}"],["meta",{"property":"og:url","content":"https://hylexus.github.io/xtream-codec/guide/server/core-component/ordered-component.html"}],["meta",{"property":"og:site_name","content":"xtream-codec"}],["meta",{"property":"og:title","content":"OrderedComponent"}],["meta",{"property":"og:description","content":"OrderedComponent 作用 有些组件需要多个实例。比如 XtreamFilter，一个系统中出现 N 个过滤器是很正常的。但是这些过滤器的执行顺序怎么保证？ Xtream 中简单粗暴的方案是：让这些组件实现 OrderedComponent 接口，然后用户自己通过 order() 方法返回一个优先级，按照优先级排序(升序)。 提示 类似于 ..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://hylexus.github.io/xtream-codec/img/server/core-component/ordered-components.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-18T13:44:28.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-18T13:44:28.000Z"}]]},"git":{"createdTime":1734100399000,"updatedTime":1734529468000,"contributors":[{"name":"hylexus","username":"","email":"hylexus@163.com","commits":5}]},"readingTime":{"minutes":0.57,"words":171},"filePathRelative":"guide/server/core-component/ordered-component.md","excerpt":"\\n<h2>作用</h2>\\n<p>有些组件需要多个实例。比如 <code>XtreamFilter</code>，一个系统中出现 N 个过滤器是很正常的。但是这些过滤器的执行顺序怎么保证？</p>\\n<p><strong>Xtream</strong> 中简单粗暴的方案是：让这些组件实现 <code>OrderedComponent</code> 接口，然后用户自己通过 <code>order()</code> 方法返回一个优先级，按照优先级排序(升序)。</p>\\n<div class=\\"hint-container tip\\">\\n<p class=\\"hint-container-title\\">提示</p>\\n<ul>\\n<li>类似于 <strong>spring</strong> 的 <code>@org.springframework.core.Ordered</code></li>\\n<li>数字越小，优先级越高</li>\\n</ul>\\n</div>","autoDesc":true}');export{k as comp,o as data};

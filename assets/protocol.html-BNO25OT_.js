import{_ as o}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as e,d as t,e as s,b as n,w as l,r as p,o as r}from"./app-C8JBMu7V.js";const c="/xtream-codec/img/core/annotation/jt-808-0200-1.png",h="/xtream-codec/img/core/annotation/jt-808-0200-2.png",k="/xtream-codec/img/core/annotation/jt-808-0200-3.png",m={};function g(u,i){const a=p("RouteLink");return r(),d("div",null,[i[9]||(i[9]=e('<h1 id="协议格式说明" tabindex="-1"><a class="header-anchor" href="#协议格式说明"><span>协议格式说明</span></a></h1><h2 id="请先读我" tabindex="-1"><a class="header-anchor" href="#请先读我"><span>请先读我</span></a></h2><div class="hint-container info"><p class="hint-container-title">请先读我</p><ul><li>本示例是对 <code>交通部 JT/T 808 协议 - V2019</code> 的解析示例</li></ul></div>',3)),t("ul",null,[i[3]||(i[3]=e("<li><code>交通部 JT/T 808 协议</code> 的消息类型有很多 <ul><li>同时有 <s>2011（废弃）</s>、<code>2013</code>、<code>2019</code> 版本，本示例仅仅展示 <code>V2019</code> 版本的 <code>0x0200</code>(地理位置) 消息类型的解析示例</li><li>而且还有各个地方标准的扩展</li></ul></li>",1)),t("li",null,[i[1]||(i[1]=s("和 ")),n(a,{to:"/guide/core/samples/custom-protocol-sample-01/protocol.html"},{default:l(()=>i[0]||(i[0]=[s("示例1")])),_:1,__:[0]}),i[2]||(i[2]=e(" 一样，本示例将演示 <strong>3</strong> 种风格的注解使用示例: <ul><li><code>Rust</code> 命名风格的注解</li><li><code>JT/T 808</code> 协议 命名风格的注解</li><li>最底层的 <code>@XtreamField</code> 风格注解(实际上前两种注解都是 <code>@XtreamField</code> 的别名)</li></ul>",4))]),i[4]||(i[4]=t("li",null,[s("同时也会分为 "),t("code",null,"扁平化"),s(" 和 "),t("code",null,"内嵌"),s(" 两种方式的注解使用示例：也就是 "),t("code",null,"3 * 2 = 6"),s(" 个 基于注解的实体类示例")],-1))]),i[10]||(i[10]=e(`<h2 id="消息结构" tabindex="-1"><a class="header-anchor" href="#消息结构"><span>消息结构</span></a></h2><table><thead><tr><th>标识位</th><th>消息头</th><th>消息体</th><th>校验码</th><th>标识位</th></tr></thead><tbody><tr><td>1byte(0x7e)</td><td>16byte</td><td>不同消息 ID 有不同格式</td><td>1byte</td><td>1byte(0x7e)</td></tr></tbody></table><h3 id="消息头" tabindex="-1"><a class="header-anchor" href="#消息头"><span>消息头</span></a></h3><ul><li><code>非分包消息</code> 的消息头长度为 <code>17字节</code></li><li><code>分包消息</code> 的消息头长度为 <code>21字节</code></li></ul><p>消息头的结构如下所示：</p><div class="language-sh line-numbers-mode" data-highlighter="shiki" data-ext="sh" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-sh"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">消息ID[0-2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)	消息体属性[2-4)	协议版本号[4]   终端手机号[5-15)	消息流水号[15-17)	消息包封装项[17-21)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">byte[0-2) 	消息ID word(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">byte[2-4) 	消息体属性 word(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		bit[0-10)	消息体长度</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		bit[10-13)	数据加密方式</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">						此三位都为 0,表示消息体不加密</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">						第 </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 位为 1,表示消息体经过 RSA 算法加密</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">						其它保留</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		bit[13]		分包</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">						1: 消息体卫长消息,进行分包发送处理,具体分包信息由消息包封装项决定</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">						0: 则消息头中无消息包封装项字段</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		bit[14]	    版本标识</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		bit[15]	保留</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">byte[4]     协议版本号</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">byte[5-15) 	终端手机号或设备ID bcd[10]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		根据安装后终端自身的手机号转换</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		手机号不足12 位,则在前面补 </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">byte[15-17) 	消息流水号 word(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		按发送顺序从 </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 开始循环累加</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">byte[17-21) 	消息包封装项</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        如果消息体属性中相关标识位确定消息分包处理,则该项有内容</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		否则无该项</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		byte[0-2)	消息包总数(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">word</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) 该消息分包后得总包数</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">		byte[2-4)	包序号(</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">word</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))  从 </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> 开始</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="消息体" tabindex="-1"><a class="header-anchor" href="#消息体"><span>消息体</span></a></h3><p><code>交通部 JT/T 808 协议</code> 里有 <code>N</code> 种消息类型，<code>消息ID</code> 不同对应的消息体也不同,同时还有各种扩展消息，本示例仅展示 <code>0x0200</code>(地理位置) 消息类型的解析示例。</p><p><code>0x0200</code> 消息的消息体如下图所示：</p><figure><img src="`+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="编解码" tabindex="-1"><a class="header-anchor" href="#编解码"><span>编解码</span></a></h2>',13)),t("ul",null,[t("li",null,[i[6]||(i[6]=s("参考 ")),n(a,{to:"/guide/core/samples/custom-protocol-sample-02/flatten-style-demo.html"},{default:l(()=>i[5]||(i[5]=[s("扁平化写法示例")])),_:1,__:[5]})]),t("li",null,[i[8]||(i[8]=s("参考 ")),n(a,{to:"/guide/core/samples/custom-protocol-sample-02/nested-style-demo.html"},{default:l(()=>i[7]||(i[7]=[s("嵌套写法示例")])),_:1,__:[7]})])])])}const A=o(m,[["render",g]]),b=JSON.parse('{"path":"/guide/core/samples/custom-protocol-sample-02/protocol.html","title":"协议格式说明","lang":"zh-CN","frontmatter":{"date":"2024-03-09T00:00:00.000Z","icon":"file-lines","author":"hylexus","contributors":true,"article":false,"category":["示例"],"tag":["Quick-Start","编码","解码"],"description":"协议格式说明 请先读我 请先读我 本示例是对 交通部 JT/T 808 协议 - V2019 的解析示例 交通部 JT/T 808 协议 的消息类型有很多 同时有 、2013、2019 版本，本示例仅仅展示 V2019 版本的 0x0200(地理位置) 消息类型的解析示例 而且还有各个地方标准的扩展 和 一样，本示例将演示 3 种风格的注解使用示例: ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"协议格式说明\\",\\"description\\":\\"协议格式说明 请先读我 请先读我 本示例是对 交通部 JT/T 808 协议 - V2019 的解析示例 交通部 JT/T 808 协议 的消息类型有很多 同时有 、2013、2019 版本，本示例仅仅展示 V2019 版本的 0x0200(地理位置) 消息类型的解析示例 而且还有各个地方标准的扩展 和 一样，本示例将演示 3 种风格的注解使用示例: ...\\"}"],["meta",{"property":"og:url","content":"https://hylexus.github.io/xtream-codec/guide/core/samples/custom-protocol-sample-02/protocol.html"}],["meta",{"property":"og:site_name","content":"xtream-codec"}],["meta",{"property":"og:title","content":"协议格式说明"}],["meta",{"property":"og:description","content":"协议格式说明 请先读我 请先读我 本示例是对 交通部 JT/T 808 协议 - V2019 的解析示例 交通部 JT/T 808 协议 的消息类型有很多 同时有 、2013、2019 版本，本示例仅仅展示 V2019 版本的 0x0200(地理位置) 消息类型的解析示例 而且还有各个地方标准的扩展 和 一样，本示例将演示 3 种风格的注解使用示例: ..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://hylexus.github.io/xtream-codec/img/core/annotation/jt-808-0200-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-18T14:09:23.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:tag","content":"解码"}],["meta",{"property":"article:tag","content":"编码"}],["meta",{"property":"article:tag","content":"Quick-Start"}],["meta",{"property":"article:published_time","content":"2024-03-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-18T14:09:23.000Z"}]]},"git":{"createdTime":1710065417000,"updatedTime":1734530963000,"contributors":[{"name":"hylexus","username":"","email":"hylexus@163.com","commits":6}]},"readingTime":{"minutes":2.44,"words":733},"filePathRelative":"guide/core/samples/custom-protocol-sample-02/protocol.md","excerpt":"\\n<h2>请先读我</h2>\\n<div class=\\"hint-container info\\">\\n<p class=\\"hint-container-title\\">请先读我</p>\\n<ul>\\n<li>本示例是对 <code>交通部 JT/T 808 协议 - V2019</code> 的解析示例</li>\\n</ul>\\n</div>\\n<ul>\\n<li><code>交通部 JT/T 808 协议</code> 的消息类型有很多\\n<ul>\\n<li>同时有 <s>2011（废弃）</s>、<code>2013</code>、<code>2019</code> 版本，本示例仅仅展示 <code>V2019</code> 版本的 <code>0x0200</code>(地理位置) 消息类型的解析示例</li>\\n<li>而且还有各个地方标准的扩展</li>\\n</ul>\\n</li>\\n<li>和 <a href=\\"/xtream-codec/guide/core/samples/custom-protocol-sample-01/protocol.html\\" target=\\"_blank\\">示例1</a> 一样，本示例将演示 <strong>3</strong> 种风格的注解使用示例:\\n<ul>\\n<li><code>Rust</code> 命名风格的注解</li>\\n<li><code>JT/T 808</code> 协议 命名风格的注解</li>\\n<li>最底层的 <code>@XtreamField</code> 风格注解(实际上前两种注解都是 <code>@XtreamField</code> 的别名)</li>\\n</ul>\\n</li>\\n<li>同时也会分为 <code>扁平化</code> 和 <code>内嵌</code> 两种方式的注解使用示例：也就是 <code>3 * 2 = 6</code> 个 基于注解的实体类示例</li>\\n</ul>","autoDesc":true}');export{A as comp,b as data};

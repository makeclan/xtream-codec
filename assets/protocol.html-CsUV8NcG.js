import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as p,d as s,e as n,b as i,w as t,r,o as c}from"./app-C8JBMu7V.js";const d={};function m(u,e){const a=r("RouteLink");return c(),o("div",null,[e[4]||(e[4]=p(`<h1 id="协议格式说明" tabindex="-1"><a class="header-anchor" href="#协议格式说明"><span>协议格式说明</span></a></h1><h2 id="请先读我" tabindex="-1"><a class="header-anchor" href="#请先读我"><span>请先读我</span></a></h2><div class="hint-container warning"><p class="hint-container-title">注意</p><p>这里的协议格式是 <em>瞎编的</em> 一种私有协议，仅仅用于演示如何基于注解进行协议编解码。</p></div><ul><li>本示例将演示 <strong>3</strong> 种风格的注解使用示例: <ul><li><code>Rust</code> 命名风格的注解</li><li><code>JT/T 808</code> 协议 命名风格的注解</li><li>最底层的 <code>@XtreamField</code> 风格注解(实际上前两种注解都是 <code>@XtreamField</code> 的别名)</li></ul></li><li>同时也会分为 <code>扁平化</code> 和 <code>内嵌</code> 两种方式的注解使用示例：也就是 <code>3 * 2 = 6</code> 个 基于注解的实体类示例</li></ul><h2 id="协议格式" tabindex="-1"><a class="header-anchor" href="#协议格式"><span>协议格式</span></a></h2><p>协议格式分为两大块：</p><ul><li>消息头</li><li>消息体</li></ul><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>header # 消息头</span></span>
<span class="line"><span>  magicNumber:      固定为 0x80901234</span></span>
<span class="line"><span>  majorVersion:     主版本号 无符号数 1字节</span></span>
<span class="line"><span>  minorVersion:     次版本号 无符号数 1字节</span></span>
<span class="line"><span>  msgType:          消息类型 无符号数 2字节</span></span>
<span class="line"><span>  msgBodyLength:    消息体长度 无符号数 2字节</span></span>
<span class="line"><span>body # 消息体</span></span>
<span class="line"><span>  if msgType == 0x0007:</span></span>
<span class="line"><span>    usernameLength:     下一个字段长度 无符号数 2字节</span></span>
<span class="line"><span>    userName:           String &quot;UTF-8&quot;</span></span>
<span class="line"><span>    passwordLength:     下一个字段长度 无符号数 2字节</span></span>
<span class="line"><span>    password:           String &quot;GBK&quot;</span></span>
<span class="line"><span>    birthDay:           &quot;yyyyMMdd&quot; &quot;UTF-8&quot; 8字节</span></span>
<span class="line"><span>    phoneNumber:        BCD_8421[6] 6字节</span></span>
<span class="line"><span>    age:                无符号数 2字节</span></span>
<span class="line"><span>    status:             &quot;有&quot;符号数 2字节 </span></span>
<span class="line"><span>  else if msgType == 0x0002:</span></span>
<span class="line"><span>    ....</span></span>
<span class="line"><span>  else if msgType == ...:</span></span>
<span class="line"><span>    ...</span></span>
<span class="line"><span>  else:</span></span>
<span class="line"><span>    ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="编解码" tabindex="-1"><a class="header-anchor" href="#编解码"><span>编解码</span></a></h2>`,9)),s("ul",null,[s("li",null,[e[1]||(e[1]=n("参考 ")),i(a,{to:"/guide/core/samples/custom-protocol-sample-01/flatten-style-demo.html"},{default:t(()=>e[0]||(e[0]=[n("扁平化写法示例")])),_:1,__:[0]})]),s("li",null,[e[3]||(e[3]=n("参考 ")),i(a,{to:"/guide/core/samples/custom-protocol-sample-01/nested-style-demo.html"},{default:t(()=>e[2]||(e[2]=[n("嵌套写法示例")])),_:1,__:[2]})])])])}const g=l(d,[["render",m]]),b=JSON.parse('{"path":"/guide/core/samples/custom-protocol-sample-01/protocol.html","title":"协议格式说明","lang":"zh-CN","frontmatter":{"date":"2024-03-09T00:00:00.000Z","icon":"file-lines","author":"hylexus","contributors":true,"category":["示例"],"tag":["Quick-Start","编码","解码"],"description":"协议格式说明 请先读我 注意 这里的协议格式是 瞎编的 一种私有协议，仅仅用于演示如何基于注解进行协议编解码。 本示例将演示 3 种风格的注解使用示例: Rust 命名风格的注解 JT/T 808 协议 命名风格的注解 最底层的 @XtreamField 风格注解(实际上前两种注解都是 @XtreamField 的别名) 同时也会分为 扁平化 和 内嵌...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"协议格式说明\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-09T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-14T13:41:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"hylexus\\"}]}"],["meta",{"property":"og:url","content":"https://hylexus.github.io/xtream-codec/guide/core/samples/custom-protocol-sample-01/protocol.html"}],["meta",{"property":"og:site_name","content":"xtream-codec"}],["meta",{"property":"og:title","content":"协议格式说明"}],["meta",{"property":"og:description","content":"协议格式说明 请先读我 注意 这里的协议格式是 瞎编的 一种私有协议，仅仅用于演示如何基于注解进行协议编解码。 本示例将演示 3 种风格的注解使用示例: Rust 命名风格的注解 JT/T 808 协议 命名风格的注解 最底层的 @XtreamField 风格注解(实际上前两种注解都是 @XtreamField 的别名) 同时也会分为 扁平化 和 内嵌..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-14T13:41:50.000Z"}],["meta",{"property":"article:author","content":"hylexus"}],["meta",{"property":"article:tag","content":"解码"}],["meta",{"property":"article:tag","content":"编码"}],["meta",{"property":"article:tag","content":"Quick-Start"}],["meta",{"property":"article:published_time","content":"2024-03-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-14T13:41:50.000Z"}]]},"git":{"createdTime":1710065417000,"updatedTime":1734183710000,"contributors":[{"name":"hylexus","username":"","email":"hylexus@163.com","commits":3}]},"readingTime":{"minutes":1.18,"words":355},"filePathRelative":"guide/core/samples/custom-protocol-sample-01/protocol.md","excerpt":"\\n<h2>请先读我</h2>\\n<div class=\\"hint-container warning\\">\\n<p class=\\"hint-container-title\\">注意</p>\\n<p>这里的协议格式是 <em>瞎编的</em> 一种私有协议，仅仅用于演示如何基于注解进行协议编解码。</p>\\n</div>\\n<ul>\\n<li>本示例将演示 <strong>3</strong> 种风格的注解使用示例:\\n<ul>\\n<li><code>Rust</code> 命名风格的注解</li>\\n<li><code>JT/T 808</code> 协议 命名风格的注解</li>\\n<li>最底层的 <code>@XtreamField</code> 风格注解(实际上前两种注解都是 <code>@XtreamField</code> 的别名)</li>\\n</ul>\\n</li>\\n<li>同时也会分为 <code>扁平化</code> 和 <code>内嵌</code> 两种方式的注解使用示例：也就是 <code>3 * 2 = 6</code> 个 基于注解的实体类示例</li>\\n</ul>","autoDesc":true}');export{g as comp,b as data};

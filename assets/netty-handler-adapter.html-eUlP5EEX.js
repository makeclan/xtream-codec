import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,a as r,d as s,e as t,b as l,w as p,r as d,o}from"./app-C8JBMu7V.js";const h="/xtream-codec/img/server/request-processing/request-flow-0.png",k="/xtream-codec/img/server/request-processing/reactor-netty-consuming-data.png",c={};function g(y,e){const i=d("RouteLink");return o(),n("div",null,[e[5]||(e[5]=r('<h1 id="nettyhandleradapter" tabindex="-1"><a class="header-anchor" href="#nettyhandleradapter"><span>NettyHandlerAdapter</span></a></h1><h2 id="请求处理流程" tabindex="-1"><a class="header-anchor" href="#请求处理流程"><span>请求处理流程</span></a></h2><p>下图是一个简化版的请求处理流程：</p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>通过上图不难看出，<code>NettyHandlerAdapter</code> 是 <strong>xtream</strong> 中客户端请求的入口。 也就是说，从这里开始，<strong>Xtream</strong> 接管了 <code>reactor-netty</code> 收到的客户端数据。</p><h2 id="和-reactor-netty-的整合" tabindex="-1"><a class="header-anchor" href="#和-reactor-netty-的整合"><span>和 reactor-netty 的整合</span></a></h2><p>下图是 <strong>reactor-netty</strong> 官方文档中 <a href="https://projectreactor.io/docs/netty/release/reference/tcp-server.html#consuming-data" target="_blank" rel="noopener noreferrer">Consuming Data</a> 章节的截图：</p><figure><img src="'+k+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><code>NettyHandlerAdapter</code> 的角色就是上图中标红的 <code>handle()</code> 方法的参数。</p><p><code>handle()</code> 方法参数类型是 <code>BiFunction&lt;? super NettyInbound, ? super NettyOutbound, ? extends Publisher&lt;Void&gt;&gt;</code>。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> abstract</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TcpServer</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ServerTransport</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TcpServer</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TcpServerConfig</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TcpServer</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> handle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BiFunction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> super</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> NettyInbound</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> super</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> NettyOutbound</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Publisher</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&gt; </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">handler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">		Objects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">requireNonNull</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(handler, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;handler&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">		return</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> doOnConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> OnConnectionHandle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(handler));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内置实现" tabindex="-1"><a class="header-anchor" href="#内置实现"><span>内置实现</span></a></h2><ul><li><code>DefaultTcpXtreamNettyHandlerAdapter</code>: 处理 <strong>TCP</strong> 请求的内置实现</li><li><code>DefaultUdpXtreamNettyHandlerAdapter</code>: 处理 <strong>UDP</strong> 请求的内置实现</li></ul><p>这两个内置实现大同小异，基本流程如下:</p><ul><li>将请求信息封装为统一的 <code>XtreamExchange</code><ul><li><code>XtreamRequest</code></li><li><code>XtreamResponse</code></li><li><code>XtreamSession</code></li></ul></li><li>将 <code>XtreamExchange</code> 的处理委托给<code>XtreamHandler.handle(XtreamExchange)</code></li><li>从这里开始，统一了 <strong>TCP</strong> 和 <strong>UDP</strong> 的编程接口</li></ul>`,15)),s("p",null,[e[1]||(e[1]=t("有关 ")),e[2]||(e[2]=s("code",null,"XtreamHandler",-1)),e[3]||(e[3]=t(" 的更多信息，见 ")),l(i,{to:"/guide/server/core-component/xtream-handler.html"},{default:p(()=>e[0]||(e[0]=[t("XtreamHandler")])),_:1,__:[0]}),e[4]||(e[4]=t(" 。"))])])}const A=a(c,[["render",g]]),B=JSON.parse('{"path":"/guide/server/core-component/netty-handler-adapter.html","title":"NettyHandlerAdapter","lang":"zh-CN","frontmatter":{"date":"2024-12-10T00:00:00.000Z","icon":"plug","article":false,"description":"NettyHandlerAdapter 请求处理流程 下图是一个简化版的请求处理流程： 通过上图不难看出，NettyHandlerAdapter 是 xtream 中客户端请求的入口。 也就是说，从这里开始，Xtream 接管了 reactor-netty 收到的客户端数据。 和 reactor-netty 的整合 下图是 reactor-netty ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"NettyHandlerAdapter\\",\\"description\\":\\"NettyHandlerAdapter 请求处理流程 下图是一个简化版的请求处理流程： 通过上图不难看出，NettyHandlerAdapter 是 xtream 中客户端请求的入口。 也就是说，从这里开始，Xtream 接管了 reactor-netty 收到的客户端数据。 和 reactor-netty 的整合 下图是 reactor-netty ...\\"}"],["meta",{"property":"og:url","content":"https://hylexus.github.io/xtream-codec/guide/server/core-component/netty-handler-adapter.html"}],["meta",{"property":"og:site_name","content":"xtream-codec"}],["meta",{"property":"og:title","content":"NettyHandlerAdapter"}],["meta",{"property":"og:description","content":"NettyHandlerAdapter 请求处理流程 下图是一个简化版的请求处理流程： 通过上图不难看出，NettyHandlerAdapter 是 xtream 中客户端请求的入口。 也就是说，从这里开始，Xtream 接管了 reactor-netty 收到的客户端数据。 和 reactor-netty 的整合 下图是 reactor-netty ..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://hylexus.github.io/xtream-codec/img/server/request-processing/request-flow-0.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-18T13:44:28.000Z"}],["meta",{"property":"article:published_time","content":"2024-12-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-18T13:44:28.000Z"}]]},"git":{"createdTime":1734100399000,"updatedTime":1734529468000,"contributors":[{"name":"hylexus","username":"","email":"hylexus@163.com","commits":4}]},"readingTime":{"minutes":0.9,"words":269},"filePathRelative":"guide/server/core-component/netty-handler-adapter.md","excerpt":"\\n<h2>请求处理流程</h2>\\n<p>下图是一个简化版的请求处理流程：</p>\\n<figure><img src=\\"/img/server/request-processing/request-flow-0.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>\\n<p>通过上图不难看出，<code>NettyHandlerAdapter</code> 是 <strong>xtream</strong> 中客户端请求的入口。\\n也就是说，从这里开始，<strong>Xtream</strong> 接管了 <code>reactor-netty</code> 收到的客户端数据。</p>","autoDesc":true}');export{A as comp,B as data};

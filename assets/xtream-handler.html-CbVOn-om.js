import{_ as i}from"./exception-handling-xtream-handler-CSWwvXDd.js";import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,d as t,a as l,e as a,b as o,w as d,r as c,o as p}from"./app-C8JBMu7V.js";const m="/xtream-codec/img/server/request-processing/request-flow-1.png",h={};function g(u,e){const r=c("RouteLink");return p(),s("div",null,[e[5]||(e[5]=t("h1",{id:"xtreamhandler",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#xtreamhandler"},[t("span",null,"XtreamHandler")])],-1)),e[6]||(e[6]=t("h2",{id:"作用",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#作用"},[t("span",null,"作用")])],-1)),t("p",null,[e[1]||(e[1]=a("上一章节的 ")),o(r,{to:"/guide/server/core-component/netty-handler-adapter.html"},{default:d(()=>e[0]||(e[0]=[a("NettyHandlerAdapter")])),_:1,__:[0]}),e[2]||(e[2]=a(" 中，将 TCP 和 UDP 请求封装成了统一的 ")),e[3]||(e[3]=t("code",null,"XtreamExchange",-1)),e[4]||(e[4]=a("。"))]),e[7]||(e[7]=l('<p>本章节的 <code>XtreamHandler</code> 就是用来处理 <code>XtreamExchange</code> 的。</p><figure><img src="'+m+`" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>接口定义如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-java"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> XtreamHandler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Mono</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> handle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">XtreamExchange</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> exchange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过参数中的 <code>XtreamExchange</code>，可以方便地处理 <strong>TCP/UDP</strong> 请求：</p><ul><li><code>XtreamRequest</code>: 本次请求</li><li><code>XtreamResponse</code>: 和 <code>XtreamRequest</code> 相对应的响应</li><li><code>XtreamSession</code>: 对应的客户端会话信息</li></ul><h2 id="内置实现" tabindex="-1"><a class="header-anchor" href="#内置实现"><span>内置实现</span></a></h2><p>有如下三个内置实现，三个内置实现层层递进，后者是对前者的装饰：</p><ul><li>1). <code>DispatcherXtreamHandler</code>: 为了方便扩展，这个内置实现聚合了下面组件: <ul><li><code>XtreamHandlerMapping</code>: 确定当前请求可以被那个处理器处理，返回处理器</li><li><code>XtreamHandlerAdapter</code>: 对上一步返回的处理器的适配器，因为实际场景中处理器可能是各种各样的，所以需要适配器</li><li><code>XtreamHandlerResultHandler</code>: 对适配器的执行结果(实际上是处理器的返回值)的再次处理(统一编码、加密等)</li></ul></li><li>2). <code>FilteringXtreamHandler</code><ul><li>这个内置实现聚合了 <code>DispatcherXtreamHandler</code> 和 <code>XtreamFilter</code></li><li>在 <code>DispatcherXtreamHandler</code> 执行之前，会有一堆 <code>XtreamFilter</code> 的逻辑。</li></ul></li><li>3). <code>ExceptionHandlingXtreamHandler</code><ul><li>这个内置实现聚合了 <code>FilteringXtreamHandler</code> 和 <code>XtreamRequestExceptionHandler</code></li><li>在 <code>FilteringXtreamHandler</code> 执行前，先绑定好 <code>reactor</code> 的异常处理器；这样一来，在后续流程异常时可以通过 <code>XtreamRequestExceptionHandler</code> 来处理异常</li></ul></li></ul><p>下图是三个内置实现之间的依赖关系：</p><figure><img src="`+i+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',11))])}const y=n(h,[["render",g]]),f=JSON.parse('{"path":"/guide/server/core-component/xtream-handler.html","title":"XtreamHandler","lang":"zh-CN","frontmatter":{"icon":"repeat","article":false,"description":"XtreamHandler 作用 上一章节的 中，将 TCP 和 UDP 请求封装成了统一的 XtreamExchange。 本章节的 XtreamHandler 就是用来处理 XtreamExchange 的。 接口定义如下： 通过参数中的 XtreamExchange，可以方便地处理 TCP/UDP 请求： XtreamRequest: 本次请求 ...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"XtreamHandler\\",\\"description\\":\\"XtreamHandler 作用 上一章节的 中，将 TCP 和 UDP 请求封装成了统一的 XtreamExchange。 本章节的 XtreamHandler 就是用来处理 XtreamExchange 的。 接口定义如下： 通过参数中的 XtreamExchange，可以方便地处理 TCP/UDP 请求： XtreamRequest: 本次请求 ...\\"}"],["meta",{"property":"og:url","content":"https://hylexus.github.io/xtream-codec/guide/server/core-component/xtream-handler.html"}],["meta",{"property":"og:site_name","content":"xtream-codec"}],["meta",{"property":"og:title","content":"XtreamHandler"}],["meta",{"property":"og:description","content":"XtreamHandler 作用 上一章节的 中，将 TCP 和 UDP 请求封装成了统一的 XtreamExchange。 本章节的 XtreamHandler 就是用来处理 XtreamExchange 的。 接口定义如下： 通过参数中的 XtreamExchange，可以方便地处理 TCP/UDP 请求： XtreamRequest: 本次请求 ..."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:image","content":"https://hylexus.github.io/xtream-codec/img/server/request-processing/request-flow-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-18T13:44:28.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-18T13:44:28.000Z"}]]},"git":{"createdTime":1734100399000,"updatedTime":1734529468000,"contributors":[{"name":"hylexus","username":"","email":"hylexus@163.com","commits":4}]},"readingTime":{"minutes":1.19,"words":357},"filePathRelative":"guide/server/core-component/xtream-handler.md","excerpt":"\\n<h2>作用</h2>\\n<p>上一章节的 <a href=\\"/xtream-codec/guide/server/core-component/netty-handler-adapter.html\\" target=\\"_blank\\">NettyHandlerAdapter</a> 中，将 TCP 和 UDP 请求封装成了统一的 <code>XtreamExchange</code>。</p>\\n<p>本章节的 <code>XtreamHandler</code> 就是用来处理 <code>XtreamExchange</code> 的。</p>\\n<figure><img src=\\"/img/server/request-processing/request-flow-1.png\\" alt=\\"\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption></figcaption></figure>","autoDesc":true}');export{y as comp,f as data};

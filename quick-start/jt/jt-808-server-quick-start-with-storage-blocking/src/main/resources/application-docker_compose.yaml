#
# Copyright 2024 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

demo-app-with-storage:
  # 示例项目的开关配置
  feature-control:
    # 数据库开关(请求日志、苏标附件文件信息会写入数据库)
    ## 可以同时启用多个
    database:
      ## 仅仅打了个日志用来调试
      logging:
        enabled: true
      ## 存储到 Clickhouse 中
      tdengine:
        enabled: ${FEATURE_CONTROL_DATABASE_TDENGINE_ENABLED:true}
      clickhouse:
        enabled: ${FEATURE_CONTROL_DATABASE_CLICKHOUSE_ENABLED:false}
      ## 存储到 MySQL 中
      mysql:
        enabled: ${FEATURE_CONTROL_DATABASE_MYSQL_ENABLED:false}
      ## 存储到 Postgres 中
      postgres:
        enabled: ${FEATURE_CONTROL_DATABASE_POSTGRES_ENABLED:false}
    # OSS(对象存储服务)开关(苏标附件文件会上传到启用的OSS中)
    ## 可以同时启用多个
    oss:
      ## 仅仅打了个附件文件信息日志用来调试
      logging:
        enabled: true
      ## 文件会存储到Minio中
      minio:
        enabled: ${FEATURE_CONTROL_OSS_MINIO_ENABLED:true}
  minio:
    endpoint: ${MINIO_ENDPOINT:http://localhost:9000}
    access-key: ${MINIO_ACCESS_KEY:IMesOv1gMCvyQECUUDSo}
    secret-key: ${MINIO_SECRET_KEY:zI6O2JlRwlqNYpGD9c7NLTjuZnZWK2HNR71PHC4I}
  # 示例性的附件服务器配置
  attachment-server:
    # 附件服务器的IP 应该是一个公网IP(设备能访问的IP)
    server-ip: ${ATTACHMENT_SERVER_IP:192.168.71.176}
    # 用来存放附件文件的临时路径
    temporary-path: /tmp/jt-808/attachment
    # 将本地文件上传到远程存储后，是否保留本地文件
    retain-local-temporary-file: false
    # 远程存储的 bucket 名称(对应上面 minio 的 bucketName)
    # 项目启动时会自动创建(为简化示例，会自动将 bucket 改为可匿名访问)
    remote-storage-bucket-name: jt-attachment
    file-preview-base-url: ${demo-app-with-storage.minio.endpoint}/${demo-app-with-storage.attachment-server.remote-storage-bucket-name}

server:
  port: 8888

spring:
  main:
    # [阻塞]环境下，显式指定 Servlet(不配置也可以,默认就是Tomcat)
    web-application-type: servlet
  web:
    resources:
      static-locations:
        - classpath:/static/quickstart-ui/
  ds:
    aop:
      enabled: true
      order: 1
    jdbc-config-decrypt: false
    primary: trace-log-tdengine
    routing:
      trace-log-mysql:
        name: trace-log-mysql
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.cj.jdbc.Driver
        url: ${MYSQL_JDBC_URL:jdbc:mysql://localhost:3307/jt_808}
        username: ${MYSQL_JDBC_USERNAME:root}
        password: ${MYSQL_JDBC_PASSWORD:ddm@126.com}
        hikari:
          minimum-idle: 1
          maximum-pool-size: 10
      trace-log-tdengine :
        name: trace-log-tdengine
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.taosdata.jdbc.rs.RestfulDriver
        url: ${MYSQL_JDBC_URL:jdbc:TAOS-RS://192.168.4.238:6041/jt_808?timezone=UTC-8&charset=UTF-8&locale=en_US.UTF-8}
        username: ${MYSQL_JDBC_USERNAME:root}
        password: ${MYSQL_JDBC_PASSWORD:taosdata}
        hikari:
          minimum-idle: 1
          maximum-pool-size: 10
      trace-log-postgres:
        name: trace-log-postgres
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: org.postgresql.Driver
        url: ${POSTGRES_JDBC_URL:jdbc:postgresql://localhost:5432/jt_808}
        username: ${POSTGRES_JDBC_USERNAME:jt}
        password: ${POSTGRES_JDBC_PASSWORD:postgres}
        hikari:
          minimum-idle: 1
          maximum-pool-size: 10
      trace-log-clickhouse:
        name: trace-log-clickhouse
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.clickhouse.jdbc.ClickHouseDriver
        url: ${CLICKHOUSE_JDBC_URL:jdbc:clickhouse://localhost:8123/jt_808}
        username: ${CLICKHOUSE_JDBC_USERNAME:jt}
        password: ${CLICKHOUSE_JDBC_PASSWORD:clickhouse}
        hikari:
          minimum-idle: 1
          maximum-pool-size: 10

########################################################
### xtream-codec-server-reactive 配置####################
########################################################
jt808-server:
  # false: 不会进行任何自动配置
  enabled: true
  features:
    dashboard:
      enabled: true
      # 示例项目有自己的首页 所以不用重定向到dashboard首页
      redirect-root-to-base-path: false
  ## 指令服务器
  instruction-server:
    # TCP 服务配置(指令服务器)
    tcp-server:
      # 是否启动 TCP 服务
      enabled: true
      # 绑定所有网卡
      host: 0.0.0.0
      # TCP 服务端口
      port: 3927
      max-instruction-frame-length: 2048
    # UDP 服务配置(指令服务器)
    udp-server:
      # 是否启动 UDP 服务
      enabled: true
      # 绑定所有网卡
      host: 0.0.0.0
      # UDP 服务端口
      port: 3721
  ## 附件服务器
  attachment-server:
    # TCP 服务配置(附件服务器)
    tcp-server:
      enabled: true
      # 绑定所有网卡
      host: 0.0.0.0
      # TCP 服务端口
      port: 3824
    # UDP 服务配置(附件服务器)
    udp-server:
      enabled: true
      # 绑定所有网卡
      host: 0.0.0.0
      # UDP 服务端口
      port: 3618
  schedulers:
    # 阻塞版的调度器都使用虚拟线程
    request-dispatcher:
      type: virtual
    non-blocking-handler:
      type: virtual
    blocking-handler:
      type: virtual
    event-publisher:
      type: virtual

mybatis:
  mapper-locations: classpath:mapper/**/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

logging:
  level:
    root: info
    io.netty.handler.logging.LoggingHandler: debug
